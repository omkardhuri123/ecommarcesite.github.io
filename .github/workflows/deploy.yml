name: Deploy Flask App

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
          MYSQL_USER: ${{ secrets.DB_USER }}
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 --silent --connect-timeout=10"
          --health-interval=20s
          --health-timeout=10s
          --health-retries=10
          --health-start-period=60s

    env:
      FLASK_APP: app.py
      FLASK_ENV: production
      DB_HOST: 127.0.0.1
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DATABASE_URI: mysql+pymysql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@127.0.0.1:3306/${{ secrets.DB_NAME }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug Workflow Environment
      run: |
        echo "Current directory:"
        pwd
        echo "Listing files:"
        ls -la

    - name: Configure MySQL credentials
      run: |
        echo "[client]
        user=$DB_USER
        password=$DB_PASSWORD
        host=127.0.0.1
        port=3306" > ~/.my.cnf
        chmod 600 ~/.my.cnf

    - name: Install MySQL Client
      run: |
        sudo apt-get update
        sudo apt-get install -y mysql-client

    - name: Debug MySQL Setup
      run: |
        echo "Testing MySQL configuration..."
        echo "DB_USER: $DB_USER"
        echo "DB_HOST: $DB_HOST"
        echo "DB_NAME: $DB_NAME"
        docker ps
        docker logs $(docker ps -q --filter "ancestor=mysql:8.0")

    - name: Debug MySQL Container
      run: |
        echo "MySQL Container Status:"
        docker ps -a
        echo "\nMySQL Container Logs:"
        docker logs $(docker ps -q --filter "ancestor=mysql:8.0")

    - name: Wait for MySQL
      run: |
        echo "Waiting for MySQL to be ready..."
        timeout 60s bash -c '
        until mysqladmin ping -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASSWORD" --silent; do
          echo "MySQL not ready - waiting..."
          sleep 2
        done
        '

    - name: Test MySQL Connection with Retry
      run: |
        for i in {1..10}; do
          if mysqladmin ping -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASSWORD" --silent; then
            echo "MySQL connection successful on attempt $i"
            break
          else
            echo "Attempt $i failed, retrying in 5 seconds..."
            sleep 5
          fi
        done

    - name: Test MySQL Connection
      run: |
        echo "Testing MySQL connection..."
        mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASSWORD" -e "
          SHOW DATABASES;
          SELECT USER(), CURRENT_USER(), VERSION();
        "

    - name: Configure MySQL User
      run: |
        echo "Configuring MySQL user privileges..."
        mysql -h "$DB_HOST" -u root -p"${{ secrets.DB_ROOT_PASSWORD }}" -e "
          CREATE USER IF NOT EXISTS '$DB_USER'@'%';
          ALTER USER '$DB_USER'@'%' IDENTIFIED BY '$DB_PASSWORD';
          GRANT ALL PRIVILEGES ON *.* TO '$DB_USER'@'%';
          FLUSH PRIVILEGES;
        "

    - name: Verify and prepare database files
      run: |
        if [ -f initialize.sql ]; then
          cp initialize.sql database.sql
        else
          echo "CREATE DATABASE IF NOT EXISTS $DB_NAME;" > database.sql
          echo "USE $DB_NAME;" >> database.sql
        fi

    - name: Debug Database Files
      run: |
        echo "Previewing database.sql:"
        cat database.sql
        echo "\nVerifying database.py exists:"
        ls -l database.py

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install Frozen-Flask Flask-Migrate
        pip check

    - name: Initialize database
      run: |
        mysql -h 127.0.0.1 -P 3306 -u $DB_USER -p$DB_PASSWORD $DB_NAME < database.sql
        python database.py

    - name: Run migrations
      run: |
        flask db upgrade

    - name: Seed database
      run: |
        python seed.py

    - name: Run tests with verbose output
      run: |
        pytest -v || echo "Tests failed"

    - name: Freeze static files
      run: |
        flask freeze
      env:
        FREEZER_DESTINATION: ./build

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build

